/*
 * the main gui form to multibridge
 * 
 */
package org.ttorhcs;

import com.dukascopy.api.JFException;
import com.dukascopy.api.Period;
import java.awt.Container;
import java.util.ArrayList;
import java.util.Collection;
import javax.swing.DefaultCellEditor;
import javax.swing.JComboBox;
import javax.swing.JScrollPane;
import javax.swing.event.TableModelEvent;
import javax.swing.table.DefaultTableCellRenderer;
import multiJForexBridge.MultiJForexBridge;
import org.ttorhcs.logging.Logger;

/**
 *
 * @author valakiquad
 */
public class MainGui extends javax.swing.JPanel {

    private final MultiJForexBridge multiBridge;
    private int maxLeverage;
    private int eqStop;
    private boolean eqLog;
    private Logger log;

    /**
     * Creates new form MainGui
     */
    public MainGui(final MultiJForexBridge multiBridge, int eqStop, int maxLeverage, boolean eqLog, JScrollPane stratsScrollPane) {
        this.multiBridge = multiBridge;
        this.maxLeverage = maxLeverage;
        this.eqStop = eqStop;
        this.eqLog = eqLog;
        this.stratsScrollPane = stratsScrollPane;
        this.log = multiBridge.log;

    }

    private javax.swing.JScrollPane setStratsScrollPane() {
        return this.stratsScrollPane;
    }

    public Container createAndShowGUI() {
        setUpColumns();
        initComponents();
        return this;
    }

    private void setUpColumns() {
        for (int i = 0; i < multiBridge.table.getColumnCount(); i++) {
            if (multiBridge.table.getColumnClass(i).isEnum()) {
                JComboBox comboBox = new JComboBox();
                for (Object object : multiBridge.table.getColumnClass(i).getEnumConstants()) {
                    comboBox.addItem(object);
                }
                multiBridge.table.getColumnModel().getColumn(i).setCellEditor(new DefaultCellEditor(comboBox));
                DefaultTableCellRenderer renderer = new DefaultTableCellRenderer();
                renderer.setToolTipText("Click to choose an " + multiBridge.table.getColumnClass(i).getName());
                multiBridge.table.getColumnModel().getColumn(i).setCellRenderer(renderer);
                continue;
            } else if (multiBridge.table.getColumnClass(i) == Period.class) {
                JComboBox comboBox = new JComboBox();
                for (Period period : Period.values()) {
                    comboBox.addItem(period);
                }
                multiBridge.table.getColumnModel().getColumn(i).setCellEditor(new DefaultCellEditor(comboBox));
                DefaultTableCellRenderer renderer = new DefaultTableCellRenderer();
                renderer.setToolTipText("Click to choose a Period");
                multiBridge.table.getColumnModel().getColumn(i).setCellRenderer(renderer);
                continue;
            }    
        }

    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        mainPanel = new javax.swing.JPanel();
        startButton = new javax.swing.JButton();
        stopButton = new javax.swing.JButton();
        addButton = new javax.swing.JButton();
        removeButton = new javax.swing.JButton();
        startAllButton = new javax.swing.JButton();
        stopAllButton = new javax.swing.JButton();
        stratsScrollPane = setStratsScrollPane();
        settingsPanel = new javax.swing.JPanel();
        eqStopLabel = new javax.swing.JLabel();
        eqStopTextField = new javax.swing.JTextField();
        maxLevLabel = new javax.swing.JLabel();
        maxLevTextField = new javax.swing.JTextField();
        eqLogLabel = new javax.swing.JLabel();
        eqLogCheckBox = new javax.swing.JCheckBox();
        settingsSetButton = new javax.swing.JButton();

        setMaximumSize(settingsPanel.getMinimumSize());
        setMinimumSize(settingsPanel.getMinimumSize());

        mainPanel.setPreferredSize(new java.awt.Dimension(664, 233));

        startButton.setText("start selected");
        startButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                startButtonActionPerformed(evt);
            }
        });

        stopButton.setText("stop selected");
        stopButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                stopButtonActionPerformed(evt);
            }
        });

        addButton.setText("add bridge");
        addButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                addButtonActionPerformed(evt);
            }
        });

        removeButton.setText("remove selected");
        removeButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                removeButtonActionPerformed(evt);
            }
        });

        startAllButton.setText("start all");
        startAllButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                startAllButtonActionPerformed(evt);
            }
        });

        stopAllButton.setText("stop all");
        stopAllButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                stopAllButtonActionPerformed(evt);
            }
        });

        stratsScrollPane.setAutoscrolls(true);

        settingsPanel.setBorder(new javax.swing.border.LineBorder(new java.awt.Color(0, 0, 0), 1, true));

        eqStopLabel.setText("equity stop: ");

        eqStopTextField.setColumns(10);
        this.eqStopTextField.setText(eqStop+"");

        maxLevLabel.setText("max leverage:");

        maxLevTextField.setColumns(10);
        this.maxLevTextField.setText(maxLeverage+"");

        eqLogLabel.setText("equity log:");

        this.eqLogCheckBox.setSelected(eqLog);

        settingsSetButton.setText("set");
        settingsSetButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                settingsSetButtonActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout settingsPanelLayout = new javax.swing.GroupLayout(settingsPanel);
        settingsPanel.setLayout(settingsPanelLayout);
        settingsPanelLayout.setHorizontalGroup(
            settingsPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(settingsPanelLayout.createSequentialGroup()
                .addContainerGap()
                .addComponent(eqStopLabel)
                .addGap(18, 18, 18)
                .addComponent(eqStopTextField, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(18, 18, 18)
                .addComponent(maxLevLabel)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addComponent(maxLevTextField, javax.swing.GroupLayout.PREFERRED_SIZE, 86, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(18, 18, 18)
                .addComponent(eqLogLabel)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addComponent(eqLogCheckBox)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addComponent(settingsSetButton)
                .addContainerGap())
        );
        settingsPanelLayout.setVerticalGroup(
            settingsPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(settingsPanelLayout.createSequentialGroup()
                .addContainerGap()
                .addGroup(settingsPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(eqLogCheckBox)
                    .addGroup(settingsPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                        .addComponent(eqStopLabel)
                        .addComponent(eqStopTextField, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addComponent(maxLevLabel)
                        .addComponent(maxLevTextField, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addComponent(eqLogLabel))
                    .addComponent(settingsSetButton))
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
        );

        javax.swing.GroupLayout mainPanelLayout = new javax.swing.GroupLayout(mainPanel);
        mainPanel.setLayout(mainPanelLayout);
        mainPanelLayout.setHorizontalGroup(
            mainPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(mainPanelLayout.createSequentialGroup()
                .addContainerGap()
                .addGroup(mainPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(stratsScrollPane)
                    .addGroup(mainPanelLayout.createSequentialGroup()
                        .addComponent(startButton)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(stopButton)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, 78, Short.MAX_VALUE)
                        .addComponent(addButton)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(removeButton)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, 82, Short.MAX_VALUE)
                        .addComponent(startAllButton)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(stopAllButton))
                    .addComponent(settingsPanel, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                .addContainerGap())
        );
        mainPanelLayout.setVerticalGroup(
            mainPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(mainPanelLayout.createSequentialGroup()
                .addContainerGap()
                .addGroup(mainPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(startButton)
                    .addComponent(stopButton)
                    .addComponent(addButton)
                    .addComponent(removeButton)
                    .addComponent(startAllButton)
                    .addComponent(stopAllButton))
                .addGap(18, 18, 18)
                .addComponent(stratsScrollPane, javax.swing.GroupLayout.DEFAULT_SIZE, 205, Short.MAX_VALUE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(settingsPanel, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addContainerGap())
        );

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(this);
        this.setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(mainPanel, javax.swing.GroupLayout.DEFAULT_SIZE, 724, Short.MAX_VALUE)
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(mainPanel, javax.swing.GroupLayout.DEFAULT_SIZE, 321, Short.MAX_VALUE)
        );
    }// </editor-fold>//GEN-END:initComponents

    private void startButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_startButtonActionPerformed
        int[] selectedRows = multiBridge.table.getSelectedRows();
        for (int i : selectedRows) {
            JForexFstBridge bridge = multiBridge.strategiesList.get(i).bridge;
            multiBridge.strategiesList.get(i).tickDone = true;
            multiBridge.strategiesList.get(i).tickSended = false;
            if (!bridge.started) {
                try {
                    bridge.onStart(multiBridge.context);
                    if (!multiBridge.strategiesList.get(i).isAlive()) {
                        multiBridge.strategiesList.get(i).start();
                    }
                } catch (JFException ex) {
                    log.error(ex);
                    bridge.started = false;
                }
            }
        }
        multiBridge.tableModel.fireTableChanged(new TableModelEvent(multiBridge.tableModel));
        multiBridge.saveConfig();
    }//GEN-LAST:event_startButtonActionPerformed

    private void stopButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_stopButtonActionPerformed
        int[] selectedRows = multiBridge.table.getSelectedRows();
        for (int i : selectedRows) {
            JForexFstBridge bridge = multiBridge.strategiesList.get(i).bridge;
            if (bridge.started) {
                try {
                    bridge.onStop();
                } catch (JFException ex) {
                    log.error(ex);
                }
            }
        }
        multiBridge.tableModel.fireTableChanged(new TableModelEvent(multiBridge.tableModel));
        multiBridge.saveConfig();
    }//GEN-LAST:event_stopButtonActionPerformed

    private void addButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_addButtonActionPerformed
        JForexFstBridge bridge = new JForexFstBridge();
        if (!multiBridge.strategiesList.isEmpty()) {
            bridge.connId = multiBridge.strategiesList.get(multiBridge.strategiesList.size() - 1).bridge.connId + 1;
            bridge.magic = multiBridge.strategiesList.get(multiBridge.strategiesList.size() - 1).bridge.magic + 1;
        } else {
            bridge.connId = 111;
            bridge.magic = 10002000;
        }
        multiBridge.addToList(bridge);
        multiBridge.tableModel.fireTableChanged(new TableModelEvent(multiBridge.tableModel));
    }//GEN-LAST:event_addButtonActionPerformed

    private void removeButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_removeButtonActionPerformed
        int[] selectedRows = multiBridge.table.getSelectedRows();
        Collection<BridgeThread> collectionToRemove = new ArrayList<BridgeThread>();
        for (int i : selectedRows) {
            BridgeThread st = multiBridge.strategiesList.get(i);
            collectionToRemove.add(st);
        }
        multiBridge.removeFromList(collectionToRemove);
        multiBridge.tableModel.fireTableChanged(new TableModelEvent(multiBridge.tableModel));
        multiBridge.saveConfig();
    }//GEN-LAST:event_removeButtonActionPerformed

    private void startAllButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_startAllButtonActionPerformed
        for (BridgeThread st : multiBridge.strategiesList) {
            JForexFstBridge bridge = st.bridge;
            if (!bridge.started) {
                try {
                    bridge.onStart(multiBridge.context);
                    if (!st.isAlive()) {
                        st.start();
                    }
                } catch (JFException ex) {
                    log.error(ex);
                    bridge.started = false;
                }
            }
        }
        multiBridge.tableModel.fireTableChanged(new TableModelEvent(multiBridge.tableModel));
        multiBridge.saveConfig();
    }//GEN-LAST:event_startAllButtonActionPerformed

    private void stopAllButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_stopAllButtonActionPerformed
        for (BridgeThread st : multiBridge.strategiesList) {
            JForexFstBridge bridge = st.bridge;
            try {
                if (bridge.started) {
                    bridge.onStop();
                }
            } catch (JFException ex) {
                log.error(ex);
            }
        }
        multiBridge.tableModel.fireTableChanged(new TableModelEvent(multiBridge.tableModel));
        multiBridge.saveConfig();
    }//GEN-LAST:event_stopAllButtonActionPerformed

    private void settingsSetButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_settingsSetButtonActionPerformed
        int eqStopFromText = 0, maxLeverageFromText = 0;

        try {
            eqStopFromText = Integer.parseInt(eqStopTextField.getText());
            multiBridge.equityStop = eqStopFromText;
            eqStop = eqStopFromText;
        } catch (Exception ex) {
            log.error(ex);
            eqStopTextField.setText(multiBridge.equityStop + "");
        }
        try {
            maxLeverageFromText = Integer.parseInt(maxLevTextField.getText());

            if (maxLeverageFromText > 100) {
                maxLeverageFromText = 100;
            }
            maxLeverage = maxLeverageFromText;
            for (BridgeThread br : multiBridge.strategiesList) {
                br.bridge.maxLeverage = maxLeverageFromText;
            }
            maxLevTextField.setText(maxLeverageFromText + "");

        } catch (Exception e) {
            log.error(e);
            maxLevTextField.setText(multiBridge.maxLeverage + "");
        }

        eqLog = eqLogCheckBox.isSelected();
        multiBridge.equityLog = eqLog;
        multiBridge.maxLeverage = maxLeverage;
        multiBridge.equityStop = eqStop;
        if (!eqLog) {
            multiBridge.closeEqLogger();
        } else {
            multiBridge.createEQLogger();
        }

        multiBridge.saveConfig();
    }//GEN-LAST:event_settingsSetButtonActionPerformed
    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton addButton;
    private javax.swing.JCheckBox eqLogCheckBox;
    private javax.swing.JLabel eqLogLabel;
    private javax.swing.JLabel eqStopLabel;
    private javax.swing.JTextField eqStopTextField;
    private javax.swing.JPanel mainPanel;
    private javax.swing.JLabel maxLevLabel;
    private javax.swing.JTextField maxLevTextField;
    private javax.swing.JButton removeButton;
    private javax.swing.JPanel settingsPanel;
    private javax.swing.JButton settingsSetButton;
    private javax.swing.JButton startAllButton;
    private javax.swing.JButton startButton;
    private javax.swing.JButton stopAllButton;
    private javax.swing.JButton stopButton;
    public javax.swing.JScrollPane stratsScrollPane;
    // End of variables declaration//GEN-END:variables
}
